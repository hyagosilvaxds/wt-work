const API_BASE_URL = 'http://localhost:3001'

// Teste para verificar se o problema de bankAccountId foi corrigido
async function testAccountsReceivableFix() {
  console.log('üîç Testando corre√ß√£o do problema de bankAccountId em contas a receber...\n')

  try {
    // 1. Primeiro, vamos buscar contas banc√°rias v√°lidas
    console.log('1. Buscando contas banc√°rias v√°lidas...')
    const bankAccountsResponse = await fetch(`${API_BASE_URL}/api/financial/bank-accounts`, {
      headers: {
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
        'Content-Type': 'application/json'
      }
    })

    if (!bankAccountsResponse.ok) {
      console.error('‚ùå Erro ao buscar contas banc√°rias:', await bankAccountsResponse.text())
      return
    }

    const bankAccountsData = await bankAccountsResponse.json()
    console.log('‚úÖ Contas banc√°rias encontradas:', bankAccountsData.accounts?.length || 0)

    if (!bankAccountsData.accounts || bankAccountsData.accounts.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma conta banc√°ria encontrada. Criando uma para teste...')
      
      // Criar uma conta banc√°ria para teste
      const createBankAccountResponse = await fetch(`${API_BASE_URL}/api/financial/bank-accounts`, {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          nome: "Conta Teste",
          banco: "Banco Teste",
          codigoBanco: "123",
          agencia: "1234",
          numero: "56789",
          digitoVerificador: "0",
          tipoConta: "CORRENTE",
          saldo: 1000,
          isActive: true,
          isMain: false
        })
      })

      if (createBankAccountResponse.ok) {
        const newBankAccount = await createBankAccountResponse.json()
        console.log('‚úÖ Conta banc√°ria criada para teste:', newBankAccount.id)
        bankAccountsData.accounts = [newBankAccount]
      } else {
        console.error('‚ùå Erro ao criar conta banc√°ria:', await createBankAccountResponse.text())
        return
      }
    }

    const validBankAccountId = bankAccountsData.accounts[0].id
    console.log('‚úÖ Usando conta banc√°ria v√°lida:', validBankAccountId)

    // 2. Buscar uma conta a receber existente
    console.log('\n2. Buscando conta a receber existente...')
    const receivablesResponse = await fetch(`${API_BASE_URL}/api/financial/accounts-receivable`, {
      headers: {
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
        'Content-Type': 'application/json'
      }
    })

    if (!receivablesResponse.ok) {
      console.error('‚ùå Erro ao buscar contas a receber:', await receivablesResponse.text())
      return
    }

    const receivablesData = await receivablesResponse.json()
    console.log('‚úÖ Contas a receber encontradas:', receivablesData.receivables?.length || 0)

    if (!receivablesData.receivables || receivablesData.receivables.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma conta a receber encontrada. Criando uma para teste...')
      
      // Criar uma conta a receber para teste
      const createReceivableResponse = await fetch(`${API_BASE_URL}/api/financial/accounts-receivable`, {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          description: "Teste de conta a receber",
          amount: 100.00,
          dueDate: new Date().toISOString(),
          status: "PENDENTE",
          category: "OUTROS",
          customerName: "Cliente Teste",
          customerDocument: "123.456.789-00",
          customerEmail: "teste@exemplo.com"
        })
      })

      if (createReceivableResponse.ok) {
        const newReceivable = await createReceivableResponse.json()
        console.log('‚úÖ Conta a receber criada para teste:', newReceivable.id)
        receivablesData.receivables = [newReceivable]
      } else {
        console.error('‚ùå Erro ao criar conta a receber:', await createReceivableResponse.text())
        return
      }
    }

    const testReceivableId = receivablesData.receivables[0].id
    console.log('‚úÖ Usando conta a receber:', testReceivableId)

    // 3. Tentar atualizar com bankAccountId v√°lido
    console.log('\n3. Testando atualiza√ß√£o com bankAccountId V√ÅLIDO...')
    const updateValidResponse = await fetch(`${API_BASE_URL}/api/financial/accounts-receivable/${testReceivableId}`, {
      method: 'PUT',
      headers: {
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        description: "Conta atualizada com bankAccountId v√°lido",
        bankAccountId: validBankAccountId
      })
    })

    if (updateValidResponse.ok) {
      console.log('‚úÖ Sucesso! Atualiza√ß√£o com bankAccountId v√°lido funcionou')
    } else {
      console.error('‚ùå Erro na atualiza√ß√£o com bankAccountId v√°lido:', await updateValidResponse.text())
    }

    // 4. Tentar atualizar com bankAccountId inv√°lido (para verificar se ainda falha)
    console.log('\n4. Testando atualiza√ß√£o com bankAccountId INV√ÅLIDO...')
    const updateInvalidResponse = await fetch(`${API_BASE_URL}/api/financial/accounts-receivable/${testReceivableId}`, {
      method: 'PUT',
      headers: {
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        description: "Tentativa com bankAccountId inv√°lido",
        bankAccountId: "id-inexistente-123"
      })
    })

    if (!updateInvalidResponse.ok) {
      console.log('‚úÖ Correto! Atualiza√ß√£o com bankAccountId inv√°lido foi rejeitada')
      console.log('üìã Erro retornado:', await updateInvalidResponse.text())
    } else {
      console.error('‚ùå Problema! Atualiza√ß√£o com bankAccountId inv√°lido n√£o deveria ter funcionado')
    }

    // 5. Testar atualiza√ß√£o sem bankAccountId (deve funcionar)
    console.log('\n5. Testando atualiza√ß√£o SEM bankAccountId...')
    const updateWithoutBankResponse = await fetch(`${API_BASE_URL}/api/financial/accounts-receivable/${testReceivableId}`, {
      method: 'PUT',
      headers: {
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbTJhYmMxMjNkZWY0NTYiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwibmFtZSI6IkFkbWluaXN0cmFkb3IiLCJyb2xlIjoiU1VQRVJfQURNSU4iLCJpYXQiOjE3MzQ4MTg4NTYsImV4cCI6MTczNDkwNTI1Nn0.vYf_6tJxH2LTKOyYhQO_yE0-WcC8A9lE7T5VN-Ym8sA',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        description: "Atualiza√ß√£o sem bankAccountId"
      })
    })

    if (updateWithoutBankResponse.ok) {
      console.log('‚úÖ Sucesso! Atualiza√ß√£o sem bankAccountId funcionou')
    } else {
      console.error('‚ùå Erro na atualiza√ß√£o sem bankAccountId:', await updateWithoutBankResponse.text())
    }

    console.log('\nüéâ Teste conclu√≠do!')
    console.log('üìù Resumo das corre√ß√µes implementadas:')
    console.log('   ‚úÖ Frontend agora carrega contas banc√°rias dinamicamente da API')
    console.log('   ‚úÖ Valida√ß√£o de bankAccountId v√°lido antes de enviar')
    console.log('   ‚úÖ bankAccountId s√≥ √© enviado se for v√°lido e n√£o vazio')
    console.log('   ‚úÖ Select hardcoded foi substitu√≠do por dados din√¢micos')

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error)
  }
}

// Executar o teste
testAccountsReceivableFix()
