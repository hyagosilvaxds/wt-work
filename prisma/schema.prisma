generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
  MANAGER
  ASSISTANT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}

enum TransactionType {
  INCOME
  EXPENSE
}

// AUTHENTICATION MODELS (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION MODELS
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole   @default(STUDENT)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  lastLogin     DateTime?

  accounts    Account[]
  sessions    Session[]
  instructor  Instructor?
  student     Student?
  skills      Skill[]      @relation("UserSkills")
  userRoles   UserRoleAssignment[] @relation("UserRoles")
  createdRoles Role[]      @relation("RoleCreator")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  creator     User?    @relation("RoleCreator", fields: [createdBy], references: [id])

  permissions RolePermission[]
  users       UserRoleAssignment[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  module      String
  action      String
  createdAt   DateTime @default(now())

  roles RolePermission[]
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  role         Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserRoleAssignment {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String?
  user      User     @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Instructor {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  classes     Class[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Student {
  id                String              @id @default(cuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId          String?
  client            Client?             @relation(fields: [clientId], references: [id])
  enrollmentDate    DateTime            @default(now())
  classes           Class[]             @relation("ClassStudents")
  certificates      Certificate[]
  accountsReceivable AccountReceivable[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Client {
  id             String    @id @default(cuid())
  name           String
  contactPerson  String?
  email          String?   @unique
  phone          String?
  students       Student[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Training {
  id            String   @id @default(cuid())
  title         String
  description   String?
  durationHours Int
  classes       Class[]
  certificates  Certificate[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Class {
  id           String   @id @default(cuid())
  trainingId   String
  training     Training @relation(fields: [trainingId], references: [id])
  instructorId String
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  roomId       String
  room         Room     @relation(fields: [roomId], references: [id])
  startDate    DateTime
  endDate      DateTime
  students     Student[] @relation("ClassStudents")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Room {
  id        String   @id @default(cuid())
  name      String
  capacity  Int
  classes   Class[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id             String   @id @default(cuid())
  studentId      String
  student        Student  @relation(fields: [studentId], references: [id])
  trainingId     String
  training       Training @relation(fields: [trainingId], references: [id])
  issueDate      DateTime @default(now())
  validationCode String   @unique
}

// FINANCIAL MODELS
model AccountReceivable {
  id          String        @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      PaymentStatus @default(PENDING)
  studentId   String?
  student     Student?      @relation(fields: [studentId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model AccountPayable {
  id          String        @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model CashFlow {
  id          String          @id @default(cuid())
  description String
  amount      Float
  type        TransactionType
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
